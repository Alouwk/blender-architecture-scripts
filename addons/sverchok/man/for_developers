	TO MAKE YOUR NODE:
1.create branch or fork of master in github
2.copy fitting existing node (test1 is pure template and may be the best example)
3.change class name, class id, class description, class registration in your file
4.add node id in node_s.py in NodeCategory, line 110
5.Add in init.py filename without .py extension in every of forth' columns, and remember to follow order in registration/unregistration
6.tell us to merge branches/forks.
7.pull git master and work forward


	SOME RULES:
1.all classes that are subclasses of blender classes - have to have prefix Sv, ie SvColors
2.node_s.py contains that classes, maybe you need to create collection property or new socket (for new type of socket tell us first), you make it here
3.util.py contain definitions, that may be used by any node. There are:

	a.update definitions, that works pretty well with sockets' and nodes' updates

	b.some bmesh functiones

	c.cache - operates with handles - we use it to operate with nodes' data, it is dictionary, with node'name, node-tree'name and it's data

	d.list levels definitions - you must yse them:
		1.data correct makes list from chaotic to 4th levels list, seems like [[[floats/integers]]] and not [[f/i]] or [[[[f/i]]]]. 
			usage: dataCorrect(data, nominal_dept=2), where data - is your list, nominal_depth - optioal, normal for your' case depth of list
		2.data spoil - make list more nasty for value of depth
			usage: dataSpoil(data, dept), where data - your list, depth - level of nestynessing. Gives list from [] to [[]] etc
		3.Levels of list - find level of nestiness.
			usage: levelsOflist(list) - returns level of list nestiness [[]] - is 2, [] - 1, [[[]]] - 3

	e.matrix definitions - to make something with matrices/vertices
		1.Matrix_generate(prop) - make from mathutils.Matrix() simple list like [[][][][]] with container is [[[][][][]]]
		2.Matrix_listing(prop) - make from simple list real mathutils.Matrix(()()()())
		3.Matrix_location(prop, list=False) - return mathutils.Vector() of matrix' location
		4.Matrix_scale(prop, list=False) - the same, but returns matrix' scale vectors
		5.Matrix_rotation(prop, list=False) - return rotation axis and rotation angle in radians value as tuple (Vector((x,y,z)),angle)
		6.Vector_generate(prop) - makes from simple list real mathutils.Vector(), as Matrix generate def
		7.Vector_degenerate(prop) - as matrix listing, it degenerate Vectors to simple list
		8.Vector_degenerate(prop) - define wether it is edges or polygons in list, and terurns tuple as (type,list)
		9.matrixdef(orig, loc, scale, rot, angle, vec_angle=[[]]) - defines matrix

	f.list definitions:
		1.fullList(l, count) - makes list full till some count. last item multiplied to rest of needed length, ie [1,2,3,4] for count 6 will be [1,2,3,4,4,4]
		2.some others to operate with exact nodes

	g.update sockets - definitions to operate with update

	h.changable type of socket - makes possible to use changable socket in your node - it calling
			usage:
			1.node has to have self veriables:
			  self.typ = bpy.props.StringProperty(name='typ', default='')
			  self.newsock = bpy.props.BoolProperty(name='newsock', default=False)
			2.and in update:
			  inputsocketname = 'data' # 'data' - name of your input socket, that defines type
			  outputsocketname = ['dataTrue','dataFalse'] # 'data...' - are names of your sockets to be changed
			  changable_sockets(self, inputsocketname, outputsocketname)

	i.multisocket definitions - makes possible to use multisocket (as in formulas 'n' sockets) - in todo list

4.not use enumerate property, if you prepare to add items to this property. it makes life harder.
5.not make many nodes if you can do less multifunctionsl.
6.use levels, findout how it works and use level IntProperty in draw to define what level is to operate. We operate with 1,2,3 - standart and additional 4... infinity. make sure, that your levels limited, dropped down by levelsOflist as maximum value
7.keep order in node' update definition as if output: if input. To count input only if you have output socket assembled.
8.look at todo list to know what is happening on and what you can do.
9.use your nodes and test them.
10.there is no reason to auto wrap or make less levels of wrapping, than needed to proceed in other nodes. So, for now canonical will be [[0,1,2,3]] for simple data and [[[0,1,2,3]]] for real data as edge, vertex, matrix other cases may be more nasty, but not less nesty and wrapping need to be grounded on some reasons to be provided.
11.Look at test1 node. it is canonical node. This is how all have to be organized. If you need to do new node - take test1 as default template.
